Useless nonterminals

   comment


Terminals which are not used

   COMMENT


Useless rules

   38 comment: COMMENT


Rules never reduced

   35 assignOp: tIDEN tASSIGN tIDEN


State 10 conflicts: 5 shift/reduce, 1 reduce/reduce
State 27 conflicts: 5 shift/reduce, 1 reduce/reduce
State 29 conflicts: 5 shift/reduce, 1 reduce/reduce
State 46 conflicts: 1 reduce/reduce
State 49 conflicts: 5 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: input $end

    1 input: input declarations ifwhilecombo
    2      | input ifwhilecombo
    3      | declarations ifwhilecombo
    4      | ifwhilecombo

    5 declarations: declarations VAR tIDEN COLON FLOAT ENDL
    6             | declarations VAR tIDEN COLON INT ENDL
    7             | declarations VAR tIDEN COLON STRING ENDL
    8             | VAR tIDEN COLON FLOAT ENDL
    9             | VAR tIDEN COLON INT ENDL
   10             | VAR tIDEN COLON STRING ENDL

   11 simpleStmts: PRINT expOp ENDL
   12            | PRINT tSTRING_LITERAL ENDL
   13            | PRINT ENDL
   14            | READ tIDEN ENDL
   15            | assignOp ENDL

   16 ifwhilecombo: ifwhilecombo WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo simpleStmts
   20             | WHILE expOp DO ifwhilecombo DONE
   21             | IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   22             | IF expOp THEN ifwhilecombo ENDIF
   23             | simpleStmts

   24 expOp: expOp '-' expOp
   25      | expOp '+' expOp
   26      | expOp '*' expOp
   27      | expOp '/' expOp
   28      | '(' expOp ')'
   29      | '-' expOp
   30      | tINT
   31      | tFLOAT
   32      | tIDEN

   33 assignOp: /* empty */
   34         | tIDEN tASSIGN expOp
   35         | tIDEN tASSIGN tIDEN
   36         | tIDEN tASSIGN tSTRING_LITERAL
   37         | tIDEN


Terminals, with rules where they appear

$end (0) 0
'(' (40) 28
')' (41) 28
'*' (42) 26
'+' (43) 25
'-' (45) 24 29
'/' (47) 27
error (256)
VAR (258) 5 6 7 8 9 10
WHILE (259) 16 20
DO (260) 16 20
DONE (261) 16 20
IF (262) 17 18 21 22
THEN (263) 17 18 21 22
ELSE (264) 17 21
ENDIF (265) 17 18 21 22
PRINT (266) 11 12 13
READ (267) 14
FLOAT (268) 5 8
STRING (269) 7 10
INT (270) 6 9
tIDEN (271) 5 6 7 8 9 10 14 32 34 35 36 37
tFLOAT (272) 31
tINT (273) 30
tSTRING_LITERAL (274) 12 36
NEG (275)
tASSIGN (276) 34 35 36
COMMENT (277)
ENDL (278) 5 6 7 8 9 10 11 12 13 14 15
COLON (279) 5 6 7 8 9 10


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
input (32)
    on left: 1 2 3 4, on right: 0 1 2
declarations (33)
    on left: 5 6 7 8 9 10, on right: 1 3 5 6 7
simpleStmts (34)
    on left: 11 12 13 14 15, on right: 19 23
ifwhilecombo (35)
    on left: 16 17 18 19 20 21 22 23, on right: 1 2 3 4 16 17 18 19
    20 21 22
expOp (36)
    on left: 24 25 26 27 28 29 30 31 32, on right: 11 16 17 18 20 21
    22 24 25 26 27 28 29 34
assignOp (37)
    on left: 33 34 35 36 37, on right: 15


state 0

    0 $accept: . input $end

    VAR    shift, and go to state 1
    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    input         go to state 7
    declarations  go to state 8
    simpleStmts   go to state 9
    ifwhilecombo  go to state 10
    assignOp      go to state 11


state 1

    8 declarations: VAR . tIDEN COLON FLOAT ENDL
    9             | VAR . tIDEN COLON INT ENDL
   10             | VAR . tIDEN COLON STRING ENDL

    tIDEN  shift, and go to state 12


state 2

   20 ifwhilecombo: WHILE . expOp DO ifwhilecombo DONE

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 18


state 3

   21 ifwhilecombo: IF . expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   22             | IF . expOp THEN ifwhilecombo ENDIF

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 19


state 4

   11 simpleStmts: PRINT . expOp ENDL
   12            | PRINT . tSTRING_LITERAL ENDL
   13            | PRINT . ENDL

    tIDEN            shift, and go to state 13
    tFLOAT           shift, and go to state 14
    tINT             shift, and go to state 15
    tSTRING_LITERAL  shift, and go to state 20
    '-'              shift, and go to state 16
    '('              shift, and go to state 17
    ENDL             shift, and go to state 21

    expOp  go to state 22


state 5

   14 simpleStmts: READ . tIDEN ENDL

    tIDEN  shift, and go to state 23


state 6

   34 assignOp: tIDEN . tASSIGN expOp
   35         | tIDEN . tASSIGN tIDEN
   36         | tIDEN . tASSIGN tSTRING_LITERAL
   37         | tIDEN .

    tASSIGN  shift, and go to state 24

    $default  reduce using rule 37 (assignOp)


state 7

    0 $accept: input . $end
    1 input: input . declarations ifwhilecombo
    2      | input . ifwhilecombo

    $end   shift, and go to state 25
    VAR    shift, and go to state 1
    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    declarations  go to state 26
    simpleStmts   go to state 9
    ifwhilecombo  go to state 27
    assignOp      go to state 11


state 8

    3 input: declarations . ifwhilecombo
    5 declarations: declarations . VAR tIDEN COLON FLOAT ENDL
    6             | declarations . VAR tIDEN COLON INT ENDL
    7             | declarations . VAR tIDEN COLON STRING ENDL

    VAR    shift, and go to state 28
    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 29
    assignOp      go to state 11


state 9

   23 ifwhilecombo: simpleStmts .

    $default  reduce using rule 23 (ifwhilecombo)


state 10

    4 input: ifwhilecombo .
   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    WHILE     [reduce using rule 4 (input)]
    IF        [reduce using rule 4 (input)]
    PRINT     [reduce using rule 4 (input)]
    READ      [reduce using rule 4 (input)]
    tIDEN     [reduce using rule 4 (input)]
    ENDL      reduce using rule 4 (input)
    ENDL      [reduce using rule 33 (assignOp)]
    $default  reduce using rule 4 (input)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 11

   15 simpleStmts: assignOp . ENDL

    ENDL  shift, and go to state 33


state 12

    8 declarations: VAR tIDEN . COLON FLOAT ENDL
    9             | VAR tIDEN . COLON INT ENDL
   10             | VAR tIDEN . COLON STRING ENDL

    COLON  shift, and go to state 34


state 13

   32 expOp: tIDEN .

    $default  reduce using rule 32 (expOp)


state 14

   31 expOp: tFLOAT .

    $default  reduce using rule 31 (expOp)


state 15

   30 expOp: tINT .

    $default  reduce using rule 30 (expOp)


state 16

   29 expOp: '-' . expOp

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 35


state 17

   28 expOp: '(' . expOp ')'

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 36


state 18

   20 ifwhilecombo: WHILE expOp . DO ifwhilecombo DONE
   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    DO   shift, and go to state 37
    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41


state 19

   21 ifwhilecombo: IF expOp . THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   22             | IF expOp . THEN ifwhilecombo ENDIF
   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    THEN  shift, and go to state 42
    '+'   shift, and go to state 38
    '-'   shift, and go to state 39
    '*'   shift, and go to state 40
    '/'   shift, and go to state 41


state 20

   12 simpleStmts: PRINT tSTRING_LITERAL . ENDL

    ENDL  shift, and go to state 43


state 21

   13 simpleStmts: PRINT ENDL .

    $default  reduce using rule 13 (simpleStmts)


state 22

   11 simpleStmts: PRINT expOp . ENDL
   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    '+'   shift, and go to state 38
    '-'   shift, and go to state 39
    '*'   shift, and go to state 40
    '/'   shift, and go to state 41
    ENDL  shift, and go to state 44


state 23

   14 simpleStmts: READ tIDEN . ENDL

    ENDL  shift, and go to state 45


state 24

   34 assignOp: tIDEN tASSIGN . expOp
   35         | tIDEN tASSIGN . tIDEN
   36         | tIDEN tASSIGN . tSTRING_LITERAL

    tIDEN            shift, and go to state 46
    tFLOAT           shift, and go to state 14
    tINT             shift, and go to state 15
    tSTRING_LITERAL  shift, and go to state 47
    '-'              shift, and go to state 16
    '('              shift, and go to state 17

    expOp  go to state 48


state 25

    0 $accept: input $end .

    $default  accept


state 26

    1 input: input declarations . ifwhilecombo
    5 declarations: declarations . VAR tIDEN COLON FLOAT ENDL
    6             | declarations . VAR tIDEN COLON INT ENDL
    7             | declarations . VAR tIDEN COLON STRING ENDL

    VAR    shift, and go to state 28
    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 49
    assignOp      go to state 11


state 27

    2 input: input ifwhilecombo .
   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    WHILE     [reduce using rule 2 (input)]
    IF        [reduce using rule 2 (input)]
    PRINT     [reduce using rule 2 (input)]
    READ      [reduce using rule 2 (input)]
    tIDEN     [reduce using rule 2 (input)]
    ENDL      reduce using rule 2 (input)
    ENDL      [reduce using rule 33 (assignOp)]
    $default  reduce using rule 2 (input)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 28

    5 declarations: declarations VAR . tIDEN COLON FLOAT ENDL
    6             | declarations VAR . tIDEN COLON INT ENDL
    7             | declarations VAR . tIDEN COLON STRING ENDL

    tIDEN  shift, and go to state 50


state 29

    3 input: declarations ifwhilecombo .
   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    WHILE     [reduce using rule 3 (input)]
    IF        [reduce using rule 3 (input)]
    PRINT     [reduce using rule 3 (input)]
    READ      [reduce using rule 3 (input)]
    tIDEN     [reduce using rule 3 (input)]
    ENDL      reduce using rule 3 (input)
    ENDL      [reduce using rule 33 (assignOp)]
    $default  reduce using rule 3 (input)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 30

   16 ifwhilecombo: ifwhilecombo WHILE . expOp DO ifwhilecombo DONE

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 51


state 31

   17 ifwhilecombo: ifwhilecombo IF . expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo IF . expOp THEN ifwhilecombo ENDIF

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 52


state 32

   19 ifwhilecombo: ifwhilecombo simpleStmts .

    $default  reduce using rule 19 (ifwhilecombo)


state 33

   15 simpleStmts: assignOp ENDL .

    $default  reduce using rule 15 (simpleStmts)


state 34

    8 declarations: VAR tIDEN COLON . FLOAT ENDL
    9             | VAR tIDEN COLON . INT ENDL
   10             | VAR tIDEN COLON . STRING ENDL

    FLOAT   shift, and go to state 53
    STRING  shift, and go to state 54
    INT     shift, and go to state 55


state 35

   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp
   29      | '-' expOp .

    $default  reduce using rule 29 (expOp)


state 36

   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp
   28      | '(' expOp . ')'

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41
    ')'  shift, and go to state 56


state 37

   20 ifwhilecombo: WHILE expOp DO . ifwhilecombo DONE

    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 57
    assignOp      go to state 11


state 38

   25 expOp: expOp '+' . expOp

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 58


state 39

   24 expOp: expOp '-' . expOp

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 59


state 40

   26 expOp: expOp '*' . expOp

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 60


state 41

   27 expOp: expOp '/' . expOp

    tIDEN   shift, and go to state 13
    tFLOAT  shift, and go to state 14
    tINT    shift, and go to state 15
    '-'     shift, and go to state 16
    '('     shift, and go to state 17

    expOp  go to state 61


state 42

   21 ifwhilecombo: IF expOp THEN . ifwhilecombo ELSE ifwhilecombo ENDIF
   22             | IF expOp THEN . ifwhilecombo ENDIF

    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 62
    assignOp      go to state 11


state 43

   12 simpleStmts: PRINT tSTRING_LITERAL ENDL .

    $default  reduce using rule 12 (simpleStmts)


state 44

   11 simpleStmts: PRINT expOp ENDL .

    $default  reduce using rule 11 (simpleStmts)


state 45

   14 simpleStmts: READ tIDEN ENDL .

    $default  reduce using rule 14 (simpleStmts)


state 46

   32 expOp: tIDEN .
   35 assignOp: tIDEN tASSIGN tIDEN .

    ENDL      reduce using rule 32 (expOp)
    ENDL      [reduce using rule 35 (assignOp)]
    $default  reduce using rule 32 (expOp)


state 47

   36 assignOp: tIDEN tASSIGN tSTRING_LITERAL .

    $default  reduce using rule 36 (assignOp)


state 48

   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp
   34 assignOp: tIDEN tASSIGN expOp .

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41

    $default  reduce using rule 34 (assignOp)


state 49

    1 input: input declarations ifwhilecombo .
   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    WHILE     [reduce using rule 1 (input)]
    IF        [reduce using rule 1 (input)]
    PRINT     [reduce using rule 1 (input)]
    READ      [reduce using rule 1 (input)]
    tIDEN     [reduce using rule 1 (input)]
    ENDL      reduce using rule 1 (input)
    ENDL      [reduce using rule 33 (assignOp)]
    $default  reduce using rule 1 (input)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 50

    5 declarations: declarations VAR tIDEN . COLON FLOAT ENDL
    6             | declarations VAR tIDEN . COLON INT ENDL
    7             | declarations VAR tIDEN . COLON STRING ENDL

    COLON  shift, and go to state 63


state 51

   16 ifwhilecombo: ifwhilecombo WHILE expOp . DO ifwhilecombo DONE
   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    DO   shift, and go to state 64
    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    '*'  shift, and go to state 40
    '/'  shift, and go to state 41


state 52

   17 ifwhilecombo: ifwhilecombo IF expOp . THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo IF expOp . THEN ifwhilecombo ENDIF
   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    THEN  shift, and go to state 65
    '+'   shift, and go to state 38
    '-'   shift, and go to state 39
    '*'   shift, and go to state 40
    '/'   shift, and go to state 41


state 53

    8 declarations: VAR tIDEN COLON FLOAT . ENDL

    ENDL  shift, and go to state 66


state 54

   10 declarations: VAR tIDEN COLON STRING . ENDL

    ENDL  shift, and go to state 67


state 55

    9 declarations: VAR tIDEN COLON INT . ENDL

    ENDL  shift, and go to state 68


state 56

   28 expOp: '(' expOp ')' .

    $default  reduce using rule 28 (expOp)


state 57

   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts
   20             | WHILE expOp DO ifwhilecombo . DONE

    WHILE  shift, and go to state 30
    DONE   shift, and go to state 69
    IF     shift, and go to state 31
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 58

   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   25      | expOp '+' expOp .
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    '*'  shift, and go to state 40
    '/'  shift, and go to state 41

    $default  reduce using rule 25 (expOp)


state 59

   24 expOp: expOp . '-' expOp
   24      | expOp '-' expOp .
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp

    '*'  shift, and go to state 40
    '/'  shift, and go to state 41

    $default  reduce using rule 24 (expOp)


state 60

   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   26      | expOp '*' expOp .
   27      | expOp . '/' expOp

    $default  reduce using rule 26 (expOp)


state 61

   24 expOp: expOp . '-' expOp
   25      | expOp . '+' expOp
   26      | expOp . '*' expOp
   27      | expOp . '/' expOp
   27      | expOp '/' expOp .

    $default  reduce using rule 27 (expOp)


state 62

   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts
   21             | IF expOp THEN ifwhilecombo . ELSE ifwhilecombo ENDIF
   22             | IF expOp THEN ifwhilecombo . ENDIF

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    ELSE   shift, and go to state 70
    ENDIF  shift, and go to state 71
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 63

    5 declarations: declarations VAR tIDEN COLON . FLOAT ENDL
    6             | declarations VAR tIDEN COLON . INT ENDL
    7             | declarations VAR tIDEN COLON . STRING ENDL

    FLOAT   shift, and go to state 72
    STRING  shift, and go to state 73
    INT     shift, and go to state 74


state 64

   16 ifwhilecombo: ifwhilecombo WHILE expOp DO . ifwhilecombo DONE

    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 75
    assignOp      go to state 11


state 65

   17 ifwhilecombo: ifwhilecombo IF expOp THEN . ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo IF expOp THEN . ifwhilecombo ENDIF

    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 76
    assignOp      go to state 11


state 66

    8 declarations: VAR tIDEN COLON FLOAT ENDL .

    $default  reduce using rule 8 (declarations)


state 67

   10 declarations: VAR tIDEN COLON STRING ENDL .

    $default  reduce using rule 10 (declarations)


state 68

    9 declarations: VAR tIDEN COLON INT ENDL .

    $default  reduce using rule 9 (declarations)


state 69

   20 ifwhilecombo: WHILE expOp DO ifwhilecombo DONE .

    $default  reduce using rule 20 (ifwhilecombo)


state 70

   21 ifwhilecombo: IF expOp THEN ifwhilecombo ELSE . ifwhilecombo ENDIF

    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 77
    assignOp      go to state 11


state 71

   22 ifwhilecombo: IF expOp THEN ifwhilecombo ENDIF .

    $default  reduce using rule 22 (ifwhilecombo)


state 72

    5 declarations: declarations VAR tIDEN COLON FLOAT . ENDL

    ENDL  shift, and go to state 78


state 73

    7 declarations: declarations VAR tIDEN COLON STRING . ENDL

    ENDL  shift, and go to state 79


state 74

    6 declarations: declarations VAR tIDEN COLON INT . ENDL

    ENDL  shift, and go to state 80


state 75

   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   16             | ifwhilecombo WHILE expOp DO ifwhilecombo . DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    DONE   shift, and go to state 81
    IF     shift, and go to state 31
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 76

   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   17             | ifwhilecombo IF expOp THEN ifwhilecombo . ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   18             | ifwhilecombo IF expOp THEN ifwhilecombo . ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    ELSE   shift, and go to state 82
    ENDIF  shift, and go to state 83
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 77

   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts
   21             | IF expOp THEN ifwhilecombo ELSE ifwhilecombo . ENDIF

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    ENDIF  shift, and go to state 84
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 78

    5 declarations: declarations VAR tIDEN COLON FLOAT ENDL .

    $default  reduce using rule 5 (declarations)


state 79

    7 declarations: declarations VAR tIDEN COLON STRING ENDL .

    $default  reduce using rule 7 (declarations)


state 80

    6 declarations: declarations VAR tIDEN COLON INT ENDL .

    $default  reduce using rule 6 (declarations)


state 81

   16 ifwhilecombo: ifwhilecombo WHILE expOp DO ifwhilecombo DONE .

    $default  reduce using rule 16 (ifwhilecombo)


state 82

   17 ifwhilecombo: ifwhilecombo IF expOp THEN ifwhilecombo ELSE . ifwhilecombo ENDIF

    WHILE  shift, and go to state 2
    IF     shift, and go to state 3
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts   go to state 9
    ifwhilecombo  go to state 85
    assignOp      go to state 11


state 83

   18 ifwhilecombo: ifwhilecombo IF expOp THEN ifwhilecombo ENDIF .

    $default  reduce using rule 18 (ifwhilecombo)


state 84

   21 ifwhilecombo: IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF .

    $default  reduce using rule 21 (ifwhilecombo)


state 85

   16 ifwhilecombo: ifwhilecombo . WHILE expOp DO ifwhilecombo DONE
   17             | ifwhilecombo . IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF
   17             | ifwhilecombo IF expOp THEN ifwhilecombo ELSE ifwhilecombo . ENDIF
   18             | ifwhilecombo . IF expOp THEN ifwhilecombo ENDIF
   19             | ifwhilecombo . simpleStmts

    WHILE  shift, and go to state 30
    IF     shift, and go to state 31
    ENDIF  shift, and go to state 86
    PRINT  shift, and go to state 4
    READ   shift, and go to state 5
    tIDEN  shift, and go to state 6

    $default  reduce using rule 33 (assignOp)

    simpleStmts  go to state 32
    assignOp     go to state 11


state 86

   17 ifwhilecombo: ifwhilecombo IF expOp THEN ifwhilecombo ELSE ifwhilecombo ENDIF .

    $default  reduce using rule 17 (ifwhilecombo)
