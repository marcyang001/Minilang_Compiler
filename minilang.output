Useless nonterminals

   declarations
   comment


Terminals which are not used

   VAR
   FLOAT
   STRING
   INT
   COMMENT
   COLON


Useless rules

   35 declarations: declarations VAR tIDEN COLON FLOAT ENDL
   36             | declarations VAR tIDEN COLON INT ENDL
   37             | declarations VAR tIDEN COLON STRING ENDL
   38             | VAR tIDEN COLON FLOAT ENDL
   39             | VAR tIDEN COLON INT ENDL
   40             | VAR tIDEN COLON STRING ENDL

   41 comment: COMMENT


Rules never reduced

   15 ifstatement: simpleStmts

   20 whileLoop: simpleAndIfStmts

   32 assignOp: tIDEN tASSIGN tIDEN


State 0 conflicts: 4 shift/reduce, 5 reduce/reduce
State 7 conflicts: 4 shift/reduce, 7 reduce/reduce
State 8 conflicts: 4 shift/reduce, 5 reduce/reduce
State 9 conflicts: 4 shift/reduce, 1 reduce/reduce
State 10 conflicts: 4 shift/reduce, 1 reduce/reduce
State 25 conflicts: 4 shift/reduce, 5 reduce/reduce
State 27 conflicts: 4 shift/reduce, 5 reduce/reduce
State 29 conflicts: 4 shift/reduce, 5 reduce/reduce
State 34 conflicts: 4 shift/reduce, 5 reduce/reduce
State 39 conflicts: 3 shift/reduce, 1 reduce/reduce
State 43 conflicts: 1 reduce/reduce
State 47 conflicts: 4 shift/reduce, 1 reduce/reduce
State 52 conflicts: 3 shift/reduce, 6 reduce/reduce
State 55 conflicts: 3 shift/reduce, 1 reduce/reduce
State 56 conflicts: 3 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: input $end

    1 input: whileLoop

    2 simpleAndIfStmts: simpleStmts simpleAndIfStmts
    3                 | ifstatement simpleAndIfStmts
    4                 | simpleStmts

    5 simpleStmts: PRINT expOp ENDL
    6            | PRINT tSTRING_LITERAL ENDL
    7            | PRINT ENDL
    8            | READ tIDEN ENDL
    9            | assignOp ENDL

   10 ifstatement: /* empty */
   11            | IF expOp THEN ifstatement ELSE ifstatement ENDIF
   12            | IF expOp THEN ifstatement ENDIF
   13            | simpleStmts ifstatement
   14            | ifstatement simpleStmts
   15            | simpleStmts

   16 whileLoop: /* empty */
   17          | WHILE expOp DO whileLoop DONE
   18          | simpleAndIfStmts whileLoop
   19          | whileLoop simpleAndIfStmts
   20          | simpleAndIfStmts

   21 expOp: expOp '-' expOp
   22      | expOp '+' expOp
   23      | expOp '*' expOp
   24      | expOp '/' expOp
   25      | '(' expOp ')'
   26      | '-' expOp
   27      | tINT
   28      | tFLOAT
   29      | tIDEN

   30 assignOp: /* empty */
   31         | tIDEN tASSIGN expOp
   32         | tIDEN tASSIGN tIDEN
   33         | tIDEN tASSIGN tSTRING_LITERAL
   34         | tIDEN


Terminals, with rules where they appear

$end (0) 0
'(' (40) 25
')' (41) 25
'*' (42) 23
'+' (43) 22
'-' (45) 21 26
'/' (47) 24
error (256)
VAR (258)
WHILE (259) 17
DO (260) 17
DONE (261) 17
IF (262) 11 12
THEN (263) 11 12
ELSE (264) 11
ENDIF (265) 11 12
PRINT (266) 5 6 7
READ (267) 8
FLOAT (268)
STRING (269)
INT (270)
tIDEN (271) 8 29 31 32 33 34
tFLOAT (272) 28
tINT (273) 27
tSTRING_LITERAL (274) 6 33
NEG (275)
tASSIGN (276) 31 32 33
COMMENT (277)
ENDL (278) 5 6 7 8 9
COLON (279)


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
input (32)
    on left: 1, on right: 0
simpleAndIfStmts (33)
    on left: 2 3 4, on right: 2 3 18 19 20
simpleStmts (34)
    on left: 5 6 7 8 9, on right: 2 4 13 14 15
ifstatement (35)
    on left: 10 11 12 13 14 15, on right: 3 11 12 13 14
whileLoop (36)
    on left: 16 17 18 19 20, on right: 1 17 18 19
expOp (37)
    on left: 21 22 23 24 25 26 27 28 29, on right: 5 11 12 17 21 22
    23 24 25 26 31
assignOp (38)
    on left: 30 31 32 33 34, on right: 9


state 0

    0 $accept: . input $end

    WHILE  shift, and go to state 1
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $end      reduce using rule 16 (whileLoop)
    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 16 (whileLoop)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 16 (whileLoop)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 16 (whileLoop)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 16 (whileLoop)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 16 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    input             go to state 6
    simpleAndIfStmts  go to state 7
    simpleStmts       go to state 8
    ifstatement       go to state 9
    whileLoop         go to state 10
    assignOp          go to state 11


state 1

   17 whileLoop: WHILE . expOp DO whileLoop DONE

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 17


state 2

   11 ifstatement: IF . expOp THEN ifstatement ELSE ifstatement ENDIF
   12            | IF . expOp THEN ifstatement ENDIF

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 18


state 3

    5 simpleStmts: PRINT . expOp ENDL
    6            | PRINT . tSTRING_LITERAL ENDL
    7            | PRINT . ENDL

    tIDEN            shift, and go to state 12
    tFLOAT           shift, and go to state 13
    tINT             shift, and go to state 14
    tSTRING_LITERAL  shift, and go to state 19
    '-'              shift, and go to state 15
    '('              shift, and go to state 16
    ENDL             shift, and go to state 20

    expOp  go to state 21


state 4

    8 simpleStmts: READ . tIDEN ENDL

    tIDEN  shift, and go to state 22


state 5

   31 assignOp: tIDEN . tASSIGN expOp
   32         | tIDEN . tASSIGN tIDEN
   33         | tIDEN . tASSIGN tSTRING_LITERAL
   34         | tIDEN .

    tASSIGN  shift, and go to state 23

    $default  reduce using rule 34 (assignOp)


state 6

    0 $accept: input . $end

    $end  shift, and go to state 24


state 7

   18 whileLoop: simpleAndIfStmts . whileLoop
   20          | simpleAndIfStmts .

    WHILE  shift, and go to state 1
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $end      reduce using rule 16 (whileLoop)
    $end      [reduce using rule 20 (whileLoop)]
    DONE      reduce using rule 16 (whileLoop)
    DONE      [reduce using rule 20 (whileLoop)]
    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 16 (whileLoop)]
    IF        [reduce using rule 20 (whileLoop)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 16 (whileLoop)]
    PRINT     [reduce using rule 20 (whileLoop)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 16 (whileLoop)]
    READ      [reduce using rule 20 (whileLoop)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 16 (whileLoop)]
    tIDEN     [reduce using rule 20 (whileLoop)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 16 (whileLoop)]
    ENDL      [reduce using rule 20 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 16 (whileLoop)

    simpleAndIfStmts  go to state 7
    simpleStmts       go to state 8
    ifstatement       go to state 9
    whileLoop         go to state 25
    assignOp          go to state 11


state 8

    2 simpleAndIfStmts: simpleStmts . simpleAndIfStmts
    4                 | simpleStmts .
   13 ifstatement: simpleStmts . ifstatement
   15            | simpleStmts .

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 4 (simpleAndIfStmts)]
    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 15 (ifstatement)]
    PRINT     [reduce using rule 4 (simpleAndIfStmts)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 15 (ifstatement)]
    READ      [reduce using rule 4 (simpleAndIfStmts)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 15 (ifstatement)]
    tIDEN     [reduce using rule 4 (simpleAndIfStmts)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 15 (ifstatement)]
    ENDL      reduce using rule 4 (simpleAndIfStmts)
    ENDL      [reduce using rule 10 (ifstatement)]
    ENDL      [reduce using rule 15 (ifstatement)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 4 (simpleAndIfStmts)

    simpleAndIfStmts  go to state 26
    simpleStmts       go to state 8
    ifstatement       go to state 27
    assignOp          go to state 11


state 9

    3 simpleAndIfStmts: ifstatement . simpleAndIfStmts
   14 ifstatement: ifstatement . simpleStmts

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleAndIfStmts  go to state 28
    simpleStmts       go to state 29
    ifstatement       go to state 9
    assignOp          go to state 11


state 10

    1 input: whileLoop .
   19 whileLoop: whileLoop . simpleAndIfStmts

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 1 (input)

    simpleAndIfStmts  go to state 30
    simpleStmts       go to state 8
    ifstatement       go to state 9
    assignOp          go to state 11


state 11

    9 simpleStmts: assignOp . ENDL

    ENDL  shift, and go to state 31


state 12

   29 expOp: tIDEN .

    $default  reduce using rule 29 (expOp)


state 13

   28 expOp: tFLOAT .

    $default  reduce using rule 28 (expOp)


state 14

   27 expOp: tINT .

    $default  reduce using rule 27 (expOp)


state 15

   26 expOp: '-' . expOp

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 32


state 16

   25 expOp: '(' . expOp ')'

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 33


state 17

   17 whileLoop: WHILE expOp . DO whileLoop DONE
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    DO   shift, and go to state 34
    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38


state 18

   11 ifstatement: IF expOp . THEN ifstatement ELSE ifstatement ENDIF
   12            | IF expOp . THEN ifstatement ENDIF
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    THEN  shift, and go to state 39
    '+'   shift, and go to state 35
    '-'   shift, and go to state 36
    '*'   shift, and go to state 37
    '/'   shift, and go to state 38


state 19

    6 simpleStmts: PRINT tSTRING_LITERAL . ENDL

    ENDL  shift, and go to state 40


state 20

    7 simpleStmts: PRINT ENDL .

    $default  reduce using rule 7 (simpleStmts)


state 21

    5 simpleStmts: PRINT expOp . ENDL
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    '+'   shift, and go to state 35
    '-'   shift, and go to state 36
    '*'   shift, and go to state 37
    '/'   shift, and go to state 38
    ENDL  shift, and go to state 41


state 22

    8 simpleStmts: READ tIDEN . ENDL

    ENDL  shift, and go to state 42


state 23

   31 assignOp: tIDEN tASSIGN . expOp
   32         | tIDEN tASSIGN . tIDEN
   33         | tIDEN tASSIGN . tSTRING_LITERAL

    tIDEN            shift, and go to state 43
    tFLOAT           shift, and go to state 13
    tINT             shift, and go to state 14
    tSTRING_LITERAL  shift, and go to state 44
    '-'              shift, and go to state 15
    '('              shift, and go to state 16

    expOp  go to state 45


state 24

    0 $accept: input $end .

    $default  accept


state 25

   18 whileLoop: simpleAndIfStmts whileLoop .
   19          | whileLoop . simpleAndIfStmts

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 18 (whileLoop)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 18 (whileLoop)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 18 (whileLoop)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 18 (whileLoop)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 18 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 18 (whileLoop)

    simpleAndIfStmts  go to state 30
    simpleStmts       go to state 8
    ifstatement       go to state 9
    assignOp          go to state 11


state 26

    2 simpleAndIfStmts: simpleStmts simpleAndIfStmts .

    $default  reduce using rule 2 (simpleAndIfStmts)


state 27

    3 simpleAndIfStmts: ifstatement . simpleAndIfStmts
   13 ifstatement: simpleStmts ifstatement .
   14            | ifstatement . simpleStmts

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 13 (ifstatement)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 13 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 13 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 13 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 13 (ifstatement)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleAndIfStmts  go to state 28
    simpleStmts       go to state 29
    ifstatement       go to state 9
    assignOp          go to state 11


state 28

    3 simpleAndIfStmts: ifstatement simpleAndIfStmts .

    $default  reduce using rule 3 (simpleAndIfStmts)


state 29

    2 simpleAndIfStmts: simpleStmts . simpleAndIfStmts
    4                 | simpleStmts .
   13 ifstatement: simpleStmts . ifstatement
   14            | ifstatement simpleStmts .
   15            | simpleStmts .

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 4 (simpleAndIfStmts)]
    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 14 (ifstatement)]
    IF        [reduce using rule 15 (ifstatement)]
    PRINT     [reduce using rule 4 (simpleAndIfStmts)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 14 (ifstatement)]
    PRINT     [reduce using rule 15 (ifstatement)]
    READ      [reduce using rule 4 (simpleAndIfStmts)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 14 (ifstatement)]
    READ      [reduce using rule 15 (ifstatement)]
    tIDEN     [reduce using rule 4 (simpleAndIfStmts)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 14 (ifstatement)]
    tIDEN     [reduce using rule 15 (ifstatement)]
    ENDL      reduce using rule 4 (simpleAndIfStmts)
    ENDL      [reduce using rule 10 (ifstatement)]
    ENDL      [reduce using rule 14 (ifstatement)]
    ENDL      [reduce using rule 15 (ifstatement)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 4 (simpleAndIfStmts)

    simpleAndIfStmts  go to state 26
    simpleStmts       go to state 8
    ifstatement       go to state 27
    assignOp          go to state 11


state 30

   19 whileLoop: whileLoop simpleAndIfStmts .

    $default  reduce using rule 19 (whileLoop)


state 31

    9 simpleStmts: assignOp ENDL .

    $default  reduce using rule 9 (simpleStmts)


state 32

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   26      | '-' expOp .

    $default  reduce using rule 26 (expOp)


state 33

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   25      | '(' expOp . ')'

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38
    ')'  shift, and go to state 46


state 34

   17 whileLoop: WHILE expOp DO . whileLoop DONE

    WHILE  shift, and go to state 1
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    DONE      reduce using rule 16 (whileLoop)
    IF        [reduce using rule 10 (ifstatement)]
    IF        [reduce using rule 16 (whileLoop)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 16 (whileLoop)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 16 (whileLoop)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 16 (whileLoop)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 16 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleAndIfStmts  go to state 7
    simpleStmts       go to state 8
    ifstatement       go to state 9
    whileLoop         go to state 47
    assignOp          go to state 11


state 35

   22 expOp: expOp '+' . expOp

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 48


state 36

   21 expOp: expOp '-' . expOp

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 49


state 37

   23 expOp: expOp '*' . expOp

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 50


state 38

   24 expOp: expOp '/' . expOp

    tIDEN   shift, and go to state 12
    tFLOAT  shift, and go to state 13
    tINT    shift, and go to state 14
    '-'     shift, and go to state 15
    '('     shift, and go to state 16

    expOp  go to state 51


state 39

   11 ifstatement: IF expOp THEN . ifstatement ELSE ifstatement ENDIF
   12            | IF expOp THEN . ifstatement ENDIF

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleStmts  go to state 52
    ifstatement  go to state 53
    assignOp     go to state 11


state 40

    6 simpleStmts: PRINT tSTRING_LITERAL ENDL .

    $default  reduce using rule 6 (simpleStmts)


state 41

    5 simpleStmts: PRINT expOp ENDL .

    $default  reduce using rule 5 (simpleStmts)


state 42

    8 simpleStmts: READ tIDEN ENDL .

    $default  reduce using rule 8 (simpleStmts)


state 43

   29 expOp: tIDEN .
   32 assignOp: tIDEN tASSIGN tIDEN .

    ENDL      reduce using rule 29 (expOp)
    ENDL      [reduce using rule 32 (assignOp)]
    $default  reduce using rule 29 (expOp)


state 44

   33 assignOp: tIDEN tASSIGN tSTRING_LITERAL .

    $default  reduce using rule 33 (assignOp)


state 45

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   31 assignOp: tIDEN tASSIGN expOp .

    '+'  shift, and go to state 35
    '-'  shift, and go to state 36
    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    $default  reduce using rule 31 (assignOp)


state 46

   25 expOp: '(' expOp ')' .

    $default  reduce using rule 25 (expOp)


state 47

   17 whileLoop: WHILE expOp DO whileLoop . DONE
   19          | whileLoop . simpleAndIfStmts

    DONE   shift, and go to state 54
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    IF        [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleAndIfStmts  go to state 30
    simpleStmts       go to state 8
    ifstatement       go to state 9
    assignOp          go to state 11


state 48

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   22      | expOp '+' expOp .
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    $default  reduce using rule 22 (expOp)


state 49

   21 expOp: expOp . '-' expOp
   21      | expOp '-' expOp .
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    '*'  shift, and go to state 37
    '/'  shift, and go to state 38

    $default  reduce using rule 21 (expOp)


state 50

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   23      | expOp '*' expOp .
   24      | expOp . '/' expOp

    $default  reduce using rule 23 (expOp)


state 51

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   24      | expOp '/' expOp .

    $default  reduce using rule 24 (expOp)


state 52

   13 ifstatement: simpleStmts . ifstatement
   15            | simpleStmts .

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    ELSE      reduce using rule 10 (ifstatement)
    ELSE      [reduce using rule 15 (ifstatement)]
    ENDIF     reduce using rule 10 (ifstatement)
    ENDIF     [reduce using rule 15 (ifstatement)]
    PRINT     [reduce using rule 10 (ifstatement)]
    PRINT     [reduce using rule 15 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 15 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 15 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 15 (ifstatement)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleStmts  go to state 52
    ifstatement  go to state 55
    assignOp     go to state 11


state 53

   11 ifstatement: IF expOp THEN ifstatement . ELSE ifstatement ENDIF
   12            | IF expOp THEN ifstatement . ENDIF
   14            | ifstatement . simpleStmts

    ELSE   shift, and go to state 56
    ENDIF  shift, and go to state 57
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 58
    assignOp     go to state 11


state 54

   17 whileLoop: WHILE expOp DO whileLoop DONE .

    $default  reduce using rule 17 (whileLoop)


state 55

   13 ifstatement: simpleStmts ifstatement .
   14            | ifstatement . simpleStmts

    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 13 (ifstatement)]
    READ      [reduce using rule 13 (ifstatement)]
    tIDEN     [reduce using rule 13 (ifstatement)]
    ENDL      reduce using rule 13 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 13 (ifstatement)

    simpleStmts  go to state 58
    assignOp     go to state 11


state 56

   11 ifstatement: IF expOp THEN ifstatement ELSE . ifstatement ENDIF

    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 10 (ifstatement)]
    READ      [reduce using rule 10 (ifstatement)]
    tIDEN     [reduce using rule 10 (ifstatement)]
    ENDL      reduce using rule 10 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 10 (ifstatement)

    simpleStmts  go to state 52
    ifstatement  go to state 59
    assignOp     go to state 11


state 57

   12 ifstatement: IF expOp THEN ifstatement ENDIF .

    $default  reduce using rule 12 (ifstatement)


state 58

   14 ifstatement: ifstatement simpleStmts .

    $default  reduce using rule 14 (ifstatement)


state 59

   11 ifstatement: IF expOp THEN ifstatement ELSE ifstatement . ENDIF
   14            | ifstatement . simpleStmts

    ENDIF  shift, and go to state 60
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 58
    assignOp     go to state 11


state 60

   11 ifstatement: IF expOp THEN ifstatement ELSE ifstatement ENDIF .

    $default  reduce using rule 11 (ifstatement)
