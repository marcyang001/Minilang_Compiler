Useless nonterminals

   declarations
   comment


Terminals which are not used

   VAR
   FLOAT
   STRING
   INT
   COMMENT
   COLON


Useless rules

   35 declarations: declarations VAR tIDEN COLON FLOAT ENDL
   36             | declarations VAR tIDEN COLON INT ENDL
   37             | declarations VAR tIDEN COLON STRING ENDL
   38             | VAR tIDEN COLON FLOAT ENDL
   39             | VAR tIDEN COLON INT ENDL
   40             | VAR tIDEN COLON STRING ENDL

   41 comment: COMMENT


Rules never reduced

   13 ifstatement: simpleStmts

   20 whileLoop: simpleStmts

   32 assignOp: tIDEN tASSIGN tIDEN


State 0 conflicts: 3 shift/reduce, 5 reduce/reduce
State 7 conflicts: 3 shift/reduce, 7 reduce/reduce
State 24 conflicts: 3 shift/reduce, 1 reduce/reduce
State 25 conflicts: 3 shift/reduce, 1 reduce/reduce
State 31 conflicts: 3 shift/reduce, 1 reduce/reduce
State 36 conflicts: 3 shift/reduce, 6 reduce/reduce
State 40 conflicts: 1 reduce/reduce
State 45 conflicts: 3 shift/reduce, 7 reduce/reduce
State 55 conflicts: 3 shift/reduce, 1 reduce/reduce
State 57 conflicts: 3 shift/reduce, 1 reduce/reduce
State 59 conflicts: 3 shift/reduce, 1 reduce/reduce
State 61 conflicts: 3 shift/reduce, 6 reduce/reduce
State 67 conflicts: 3 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: input $end

    1 input: whileLoop
    2      | ifstatement

    3 simpleStmts: PRINT expOp ENDL
    4            | PRINT tSTRING_LITERAL ENDL
    5            | PRINT ENDL
    6            | READ tIDEN ENDL
    7            | assignOp ENDL

    8 ifstatement: /* empty */
    9            | IF expOp THEN ifstatement ELSE ifstatement ENDIF
   10            | IF expOp THEN ifstatement ENDIF
   11            | simpleStmts ifstatement
   12            | ifstatement simpleStmts
   13            | simpleStmts

   14 whileLoop: /* empty */
   15          | WHILE expOp DO whileLoop DONE
   16          | IF expOp THEN whileLoop ELSE whileLoop ENDIF
   17          | IF expOp THEN whileLoop ENDIF
   18          | simpleStmts whileLoop
   19          | whileLoop simpleStmts
   20          | simpleStmts

   21 expOp: expOp '-' expOp
   22      | expOp '+' expOp
   23      | expOp '*' expOp
   24      | expOp '/' expOp
   25      | '(' expOp ')'
   26      | '-' expOp
   27      | tINT
   28      | tFLOAT
   29      | tIDEN

   30 assignOp: /* empty */
   31         | tIDEN tASSIGN expOp
   32         | tIDEN tASSIGN tIDEN
   33         | tIDEN tASSIGN tSTRING_LITERAL
   34         | tIDEN


Terminals, with rules where they appear

$end (0) 0
'(' (40) 25
')' (41) 25
'*' (42) 23
'+' (43) 22
'-' (45) 21 26
'/' (47) 24
error (256)
VAR (258)
WHILE (259) 15
DO (260) 15
DONE (261) 15
IF (262) 9 10 16 17
THEN (263) 9 10 16 17
ELSE (264) 9 16
ENDIF (265) 9 10 16 17
PRINT (266) 3 4 5
READ (267) 6
FLOAT (268)
STRING (269)
INT (270)
tIDEN (271) 6 29 31 32 33 34
tFLOAT (272) 28
tINT (273) 27
tSTRING_LITERAL (274) 4 33
NEG (275)
tASSIGN (276) 31 32 33
COMMENT (277)
ENDL (278) 3 4 5 6 7
COLON (279)


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
input (32)
    on left: 1 2, on right: 0
simpleStmts (33)
    on left: 3 4 5 6 7, on right: 11 12 13 18 19 20
ifstatement (34)
    on left: 8 9 10 11 12 13, on right: 2 9 10 11 12
whileLoop (35)
    on left: 14 15 16 17 18 19 20, on right: 1 15 16 17 18 19
expOp (36)
    on left: 21 22 23 24 25 26 27 28 29, on right: 3 9 10 15 16 17
    21 22 23 24 25 26 31
assignOp (37)
    on left: 30 31 32 33 34, on right: 7


state 0

    0 $accept: . input $end

    WHILE  shift, and go to state 1
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $end      reduce using rule 8 (ifstatement)
    $end      [reduce using rule 14 (whileLoop)]
    PRINT     [reduce using rule 8 (ifstatement)]
    PRINT     [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 8 (ifstatement)]
    READ      [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 8 (ifstatement)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    ENDL      reduce using rule 8 (ifstatement)
    ENDL      [reduce using rule 14 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 8 (ifstatement)

    input        go to state 6
    simpleStmts  go to state 7
    ifstatement  go to state 8
    whileLoop    go to state 9
    assignOp     go to state 10


state 1

   15 whileLoop: WHILE . expOp DO whileLoop DONE

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 16


state 2

    9 ifstatement: IF . expOp THEN ifstatement ELSE ifstatement ENDIF
   10            | IF . expOp THEN ifstatement ENDIF
   16 whileLoop: IF . expOp THEN whileLoop ELSE whileLoop ENDIF
   17          | IF . expOp THEN whileLoop ENDIF

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 17


state 3

    3 simpleStmts: PRINT . expOp ENDL
    4            | PRINT . tSTRING_LITERAL ENDL
    5            | PRINT . ENDL

    tIDEN            shift, and go to state 11
    tFLOAT           shift, and go to state 12
    tINT             shift, and go to state 13
    tSTRING_LITERAL  shift, and go to state 18
    '-'              shift, and go to state 14
    '('              shift, and go to state 15
    ENDL             shift, and go to state 19

    expOp  go to state 20


state 4

    6 simpleStmts: READ . tIDEN ENDL

    tIDEN  shift, and go to state 21


state 5

   31 assignOp: tIDEN . tASSIGN expOp
   32         | tIDEN . tASSIGN tIDEN
   33         | tIDEN . tASSIGN tSTRING_LITERAL
   34         | tIDEN .

    tASSIGN  shift, and go to state 22

    $default  reduce using rule 34 (assignOp)


state 6

    0 $accept: input . $end

    $end  shift, and go to state 23


state 7

   11 ifstatement: simpleStmts . ifstatement
   13            | simpleStmts .
   18 whileLoop: simpleStmts . whileLoop
   20          | simpleStmts .

    WHILE  shift, and go to state 1
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $end      reduce using rule 8 (ifstatement)
    $end      [reduce using rule 13 (ifstatement)]
    $end      [reduce using rule 14 (whileLoop)]
    $end      [reduce using rule 20 (whileLoop)]
    ELSE      reduce using rule 8 (ifstatement)
    ELSE      [reduce using rule 13 (ifstatement)]
    ELSE      [reduce using rule 14 (whileLoop)]
    ELSE      [reduce using rule 20 (whileLoop)]
    ENDIF     reduce using rule 8 (ifstatement)
    ENDIF     [reduce using rule 13 (ifstatement)]
    ENDIF     [reduce using rule 14 (whileLoop)]
    ENDIF     [reduce using rule 20 (whileLoop)]
    PRINT     [reduce using rule 8 (ifstatement)]
    PRINT     [reduce using rule 13 (ifstatement)]
    PRINT     [reduce using rule 14 (whileLoop)]
    PRINT     [reduce using rule 20 (whileLoop)]
    READ      [reduce using rule 8 (ifstatement)]
    READ      [reduce using rule 13 (ifstatement)]
    READ      [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 20 (whileLoop)]
    tIDEN     [reduce using rule 8 (ifstatement)]
    tIDEN     [reduce using rule 13 (ifstatement)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 20 (whileLoop)]
    ENDL      reduce using rule 8 (ifstatement)
    ENDL      [reduce using rule 13 (ifstatement)]
    ENDL      [reduce using rule 14 (whileLoop)]
    ENDL      [reduce using rule 20 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 8 (ifstatement)

    simpleStmts  go to state 7
    ifstatement  go to state 24
    whileLoop    go to state 25
    assignOp     go to state 10


state 8

    2 input: ifstatement .
   12 ifstatement: ifstatement . simpleStmts

    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    ENDL      reduce using rule 30 (assignOp)
    $default  reduce using rule 2 (input)

    simpleStmts  go to state 26
    assignOp     go to state 10


state 9

    1 input: whileLoop .
   19 whileLoop: whileLoop . simpleStmts

    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    ENDL      reduce using rule 30 (assignOp)
    $default  reduce using rule 1 (input)

    simpleStmts  go to state 27
    assignOp     go to state 10


state 10

    7 simpleStmts: assignOp . ENDL

    ENDL  shift, and go to state 28


state 11

   29 expOp: tIDEN .

    $default  reduce using rule 29 (expOp)


state 12

   28 expOp: tFLOAT .

    $default  reduce using rule 28 (expOp)


state 13

   27 expOp: tINT .

    $default  reduce using rule 27 (expOp)


state 14

   26 expOp: '-' . expOp

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 29


state 15

   25 expOp: '(' . expOp ')'

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 30


state 16

   15 whileLoop: WHILE expOp . DO whileLoop DONE
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    DO   shift, and go to state 31
    '+'  shift, and go to state 32
    '-'  shift, and go to state 33
    '*'  shift, and go to state 34
    '/'  shift, and go to state 35


state 17

    9 ifstatement: IF expOp . THEN ifstatement ELSE ifstatement ENDIF
   10            | IF expOp . THEN ifstatement ENDIF
   16 whileLoop: IF expOp . THEN whileLoop ELSE whileLoop ENDIF
   17          | IF expOp . THEN whileLoop ENDIF
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    THEN  shift, and go to state 36
    '+'   shift, and go to state 32
    '-'   shift, and go to state 33
    '*'   shift, and go to state 34
    '/'   shift, and go to state 35


state 18

    4 simpleStmts: PRINT tSTRING_LITERAL . ENDL

    ENDL  shift, and go to state 37


state 19

    5 simpleStmts: PRINT ENDL .

    $default  reduce using rule 5 (simpleStmts)


state 20

    3 simpleStmts: PRINT expOp . ENDL
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    '+'   shift, and go to state 32
    '-'   shift, and go to state 33
    '*'   shift, and go to state 34
    '/'   shift, and go to state 35
    ENDL  shift, and go to state 38


state 21

    6 simpleStmts: READ tIDEN . ENDL

    ENDL  shift, and go to state 39


state 22

   31 assignOp: tIDEN tASSIGN . expOp
   32         | tIDEN tASSIGN . tIDEN
   33         | tIDEN tASSIGN . tSTRING_LITERAL

    tIDEN            shift, and go to state 40
    tFLOAT           shift, and go to state 12
    tINT             shift, and go to state 13
    tSTRING_LITERAL  shift, and go to state 41
    '-'              shift, and go to state 14
    '('              shift, and go to state 15

    expOp  go to state 42


state 23

    0 $accept: input $end .

    $default  accept


state 24

   11 ifstatement: simpleStmts ifstatement .
   12            | ifstatement . simpleStmts

    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 11 (ifstatement)]
    READ      [reduce using rule 11 (ifstatement)]
    tIDEN     [reduce using rule 11 (ifstatement)]
    ENDL      reduce using rule 11 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 11 (ifstatement)

    simpleStmts  go to state 26
    assignOp     go to state 10


state 25

   18 whileLoop: simpleStmts whileLoop .
   19          | whileLoop . simpleStmts

    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 18 (whileLoop)]
    READ      [reduce using rule 18 (whileLoop)]
    tIDEN     [reduce using rule 18 (whileLoop)]
    ENDL      reduce using rule 18 (whileLoop)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 18 (whileLoop)

    simpleStmts  go to state 27
    assignOp     go to state 10


state 26

   12 ifstatement: ifstatement simpleStmts .

    $default  reduce using rule 12 (ifstatement)


state 27

   19 whileLoop: whileLoop simpleStmts .

    $default  reduce using rule 19 (whileLoop)


state 28

    7 simpleStmts: assignOp ENDL .

    $default  reduce using rule 7 (simpleStmts)


state 29

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   26      | '-' expOp .

    $default  reduce using rule 26 (expOp)


state 30

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   25      | '(' expOp . ')'

    '+'  shift, and go to state 32
    '-'  shift, and go to state 33
    '*'  shift, and go to state 34
    '/'  shift, and go to state 35
    ')'  shift, and go to state 43


state 31

   15 whileLoop: WHILE expOp DO . whileLoop DONE

    WHILE  shift, and go to state 1
    IF     shift, and go to state 44
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    ENDL      reduce using rule 14 (whileLoop)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 14 (whileLoop)

    simpleStmts  go to state 45
    whileLoop    go to state 46
    assignOp     go to state 10


state 32

   22 expOp: expOp '+' . expOp

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 47


state 33

   21 expOp: expOp '-' . expOp

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 48


state 34

   23 expOp: expOp '*' . expOp

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 49


state 35

   24 expOp: expOp '/' . expOp

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 50


state 36

    9 ifstatement: IF expOp THEN . ifstatement ELSE ifstatement ENDIF
   10            | IF expOp THEN . ifstatement ENDIF
   16 whileLoop: IF expOp THEN . whileLoop ELSE whileLoop ENDIF
   17          | IF expOp THEN . whileLoop ENDIF

    WHILE  shift, and go to state 1
    IF     shift, and go to state 2
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    ELSE      reduce using rule 8 (ifstatement)
    ELSE      [reduce using rule 14 (whileLoop)]
    ENDIF     reduce using rule 8 (ifstatement)
    ENDIF     [reduce using rule 14 (whileLoop)]
    PRINT     [reduce using rule 8 (ifstatement)]
    PRINT     [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 8 (ifstatement)]
    READ      [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 8 (ifstatement)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    ENDL      reduce using rule 8 (ifstatement)
    ENDL      [reduce using rule 14 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 8 (ifstatement)

    simpleStmts  go to state 7
    ifstatement  go to state 51
    whileLoop    go to state 52
    assignOp     go to state 10


state 37

    4 simpleStmts: PRINT tSTRING_LITERAL ENDL .

    $default  reduce using rule 4 (simpleStmts)


state 38

    3 simpleStmts: PRINT expOp ENDL .

    $default  reduce using rule 3 (simpleStmts)


state 39

    6 simpleStmts: READ tIDEN ENDL .

    $default  reduce using rule 6 (simpleStmts)


state 40

   29 expOp: tIDEN .
   32 assignOp: tIDEN tASSIGN tIDEN .

    ENDL      reduce using rule 29 (expOp)
    ENDL      [reduce using rule 32 (assignOp)]
    $default  reduce using rule 29 (expOp)


state 41

   33 assignOp: tIDEN tASSIGN tSTRING_LITERAL .

    $default  reduce using rule 33 (assignOp)


state 42

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   31 assignOp: tIDEN tASSIGN expOp .

    '+'  shift, and go to state 32
    '-'  shift, and go to state 33
    '*'  shift, and go to state 34
    '/'  shift, and go to state 35

    $default  reduce using rule 31 (assignOp)


state 43

   25 expOp: '(' expOp ')' .

    $default  reduce using rule 25 (expOp)


state 44

   16 whileLoop: IF . expOp THEN whileLoop ELSE whileLoop ENDIF
   17          | IF . expOp THEN whileLoop ENDIF

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 53


state 45

   18 whileLoop: simpleStmts . whileLoop
   20          | simpleStmts .

    WHILE  shift, and go to state 1
    IF     shift, and go to state 44
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    DONE      reduce using rule 14 (whileLoop)
    DONE      [reduce using rule 20 (whileLoop)]
    ELSE      reduce using rule 14 (whileLoop)
    ELSE      [reduce using rule 20 (whileLoop)]
    ENDIF     reduce using rule 14 (whileLoop)
    ENDIF     [reduce using rule 20 (whileLoop)]
    PRINT     [reduce using rule 14 (whileLoop)]
    PRINT     [reduce using rule 20 (whileLoop)]
    READ      [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 20 (whileLoop)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 20 (whileLoop)]
    ENDL      reduce using rule 14 (whileLoop)
    ENDL      [reduce using rule 20 (whileLoop)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 14 (whileLoop)

    simpleStmts  go to state 45
    whileLoop    go to state 25
    assignOp     go to state 10


state 46

   15 whileLoop: WHILE expOp DO whileLoop . DONE
   19          | whileLoop . simpleStmts

    DONE   shift, and go to state 54
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 27
    assignOp     go to state 10


state 47

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   22      | expOp '+' expOp .
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    '*'  shift, and go to state 34
    '/'  shift, and go to state 35

    $default  reduce using rule 22 (expOp)


state 48

   21 expOp: expOp . '-' expOp
   21      | expOp '-' expOp .
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    '*'  shift, and go to state 34
    '/'  shift, and go to state 35

    $default  reduce using rule 21 (expOp)


state 49

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   23      | expOp '*' expOp .
   24      | expOp . '/' expOp

    $default  reduce using rule 23 (expOp)


state 50

   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp
   24      | expOp '/' expOp .

    $default  reduce using rule 24 (expOp)


state 51

    9 ifstatement: IF expOp THEN ifstatement . ELSE ifstatement ENDIF
   10            | IF expOp THEN ifstatement . ENDIF
   12            | ifstatement . simpleStmts

    ELSE   shift, and go to state 55
    ENDIF  shift, and go to state 56
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 26
    assignOp     go to state 10


state 52

   16 whileLoop: IF expOp THEN whileLoop . ELSE whileLoop ENDIF
   17          | IF expOp THEN whileLoop . ENDIF
   19          | whileLoop . simpleStmts

    ELSE   shift, and go to state 57
    ENDIF  shift, and go to state 58
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 27
    assignOp     go to state 10


state 53

   16 whileLoop: IF expOp . THEN whileLoop ELSE whileLoop ENDIF
   17          | IF expOp . THEN whileLoop ENDIF
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    THEN  shift, and go to state 59
    '+'   shift, and go to state 32
    '-'   shift, and go to state 33
    '*'   shift, and go to state 34
    '/'   shift, and go to state 35


state 54

   15 whileLoop: WHILE expOp DO whileLoop DONE .

    $default  reduce using rule 15 (whileLoop)


state 55

    9 ifstatement: IF expOp THEN ifstatement ELSE . ifstatement ENDIF

    IF     shift, and go to state 60
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 8 (ifstatement)]
    READ      [reduce using rule 8 (ifstatement)]
    tIDEN     [reduce using rule 8 (ifstatement)]
    ENDL      reduce using rule 8 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 8 (ifstatement)

    simpleStmts  go to state 61
    ifstatement  go to state 62
    assignOp     go to state 10


state 56

   10 ifstatement: IF expOp THEN ifstatement ENDIF .

    $default  reduce using rule 10 (ifstatement)


state 57

   16 whileLoop: IF expOp THEN whileLoop ELSE . whileLoop ENDIF

    WHILE  shift, and go to state 1
    IF     shift, and go to state 44
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    ENDL      reduce using rule 14 (whileLoop)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 14 (whileLoop)

    simpleStmts  go to state 45
    whileLoop    go to state 63
    assignOp     go to state 10


state 58

   17 whileLoop: IF expOp THEN whileLoop ENDIF .

    $default  reduce using rule 17 (whileLoop)


state 59

   16 whileLoop: IF expOp THEN . whileLoop ELSE whileLoop ENDIF
   17          | IF expOp THEN . whileLoop ENDIF

    WHILE  shift, and go to state 1
    IF     shift, and go to state 44
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 14 (whileLoop)]
    READ      [reduce using rule 14 (whileLoop)]
    tIDEN     [reduce using rule 14 (whileLoop)]
    ENDL      reduce using rule 14 (whileLoop)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 14 (whileLoop)

    simpleStmts  go to state 45
    whileLoop    go to state 52
    assignOp     go to state 10


state 60

    9 ifstatement: IF . expOp THEN ifstatement ELSE ifstatement ENDIF
   10            | IF . expOp THEN ifstatement ENDIF

    tIDEN   shift, and go to state 11
    tFLOAT  shift, and go to state 12
    tINT    shift, and go to state 13
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    expOp  go to state 64


state 61

   11 ifstatement: simpleStmts . ifstatement
   13            | simpleStmts .

    IF     shift, and go to state 60
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    ELSE      reduce using rule 8 (ifstatement)
    ELSE      [reduce using rule 13 (ifstatement)]
    ENDIF     reduce using rule 8 (ifstatement)
    ENDIF     [reduce using rule 13 (ifstatement)]
    PRINT     [reduce using rule 8 (ifstatement)]
    PRINT     [reduce using rule 13 (ifstatement)]
    READ      [reduce using rule 8 (ifstatement)]
    READ      [reduce using rule 13 (ifstatement)]
    tIDEN     [reduce using rule 8 (ifstatement)]
    tIDEN     [reduce using rule 13 (ifstatement)]
    ENDL      reduce using rule 8 (ifstatement)
    ENDL      [reduce using rule 13 (ifstatement)]
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 8 (ifstatement)

    simpleStmts  go to state 61
    ifstatement  go to state 24
    assignOp     go to state 10


state 62

    9 ifstatement: IF expOp THEN ifstatement ELSE ifstatement . ENDIF
   12            | ifstatement . simpleStmts

    ENDIF  shift, and go to state 65
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 26
    assignOp     go to state 10


state 63

   16 whileLoop: IF expOp THEN whileLoop ELSE whileLoop . ENDIF
   19          | whileLoop . simpleStmts

    ENDIF  shift, and go to state 66
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    $default  reduce using rule 30 (assignOp)

    simpleStmts  go to state 27
    assignOp     go to state 10


state 64

    9 ifstatement: IF expOp . THEN ifstatement ELSE ifstatement ENDIF
   10            | IF expOp . THEN ifstatement ENDIF
   21 expOp: expOp . '-' expOp
   22      | expOp . '+' expOp
   23      | expOp . '*' expOp
   24      | expOp . '/' expOp

    THEN  shift, and go to state 67
    '+'   shift, and go to state 32
    '-'   shift, and go to state 33
    '*'   shift, and go to state 34
    '/'   shift, and go to state 35


state 65

    9 ifstatement: IF expOp THEN ifstatement ELSE ifstatement ENDIF .

    $default  reduce using rule 9 (ifstatement)


state 66

   16 whileLoop: IF expOp THEN whileLoop ELSE whileLoop ENDIF .

    $default  reduce using rule 16 (whileLoop)


state 67

    9 ifstatement: IF expOp THEN . ifstatement ELSE ifstatement ENDIF
   10            | IF expOp THEN . ifstatement ENDIF

    IF     shift, and go to state 60
    PRINT  shift, and go to state 3
    READ   shift, and go to state 4
    tIDEN  shift, and go to state 5

    PRINT     [reduce using rule 8 (ifstatement)]
    READ      [reduce using rule 8 (ifstatement)]
    tIDEN     [reduce using rule 8 (ifstatement)]
    ENDL      reduce using rule 8 (ifstatement)
    ENDL      [reduce using rule 30 (assignOp)]
    $default  reduce using rule 8 (ifstatement)

    simpleStmts  go to state 61
    ifstatement  go to state 51
    assignOp     go to state 10
